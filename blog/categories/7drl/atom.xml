<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 7DRL | Kevin Mees]]></title>
  <link href="http://kmees.github.com/blog/categories/7drl/atom.xml" rel="self"/>
  <link href="http://kmees.github.com/"/>
  <updated>2012-03-29T00:49:05+02:00</updated>
  <id>http://kmees.github.com/</id>
  <author>
    <name><![CDATA[Kevin Mees]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[unicodetiles.rb]]></title>
    <link href="http://kmees.github.com/blog/2012/03/26/unicodetiles-dot-rb/"/>
    <updated>2012-03-26T10:29:00+02:00</updated>
    <id>http://kmees.github.com/blog/2012/03/26/unicodetiles-dot-rb</id>
    <content type="html"><![CDATA[<p>After my miserable fail at the 7DRL 2012 I had the urge to get at least something get at least
something useful done. So I decided to port <a href="http://tapio.github.com/unicodetiles.js/">unicodetiles.js</a>, a lightweight, character based tile engine for JavaScript to Ruby. Luckily, tapio, the author of unicodetiles.js, made it easy for me to find a name for the ruby port and it shall henceforth be called <a href="./projects/unicodetiles.html">unicodetiles.rb</a>.</p>

<p>Porting the JavaScript code to Ruby went quite smoothly and I tried to 'rubify' the code wherever possible. I decided to implement the renderer on top of the gosu gem because it gave me all the tools I needed, especially the Gosu::Font class came in quite handy. The port is feature equivalent to the JavaScript version and the examples are exactly the same. I plan on adding some more features and use it for my next (7 Day?) Roguelike project and I will also release a gem in the next few days when everything is implemented and tested.</p>

<p>Unicodetiles.rb also works quite well as a replacement for ncurses, a popular framework for writing
fancy console applications used by a lot of roguelikes. The downside to ncurses is, that it is quite
hard (or even impossible) to get running under Windows which really hampers the popularity of some
roguelikes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[7DRL 2012 - It's over !]]></title>
    <link href="http://kmees.github.com/blog/2012/03/18/7drl-2012-its-over/"/>
    <updated>2012-03-18T14:00:00+01:00</updated>
    <id>http://kmees.github.com/blog/2012/03/18/7drl-2012-its-over</id>
    <content type="html"><![CDATA[<p>It's Sunday, March 18th and exactly 7 days ago I started my 7DRL Challenge. Sadly, I wasn't able to
finish my roguelike in time but it was fun nevertheless. If I had to put a number on the
completeness of the game, I would say it's about 33% finished, but not really playable since I spent (wasted?) too much on time on the implementation of the Mech class and the UI instead of adding content/combat. In retrospect, I see a lot of room for improvements and I will write them down here such that I won't do the same mistakes twice in next years 7DRL !</p>

<!--more-->


<h2>Lessons Learned</h2>

<h3>#1 - Have a plan</h3>

<p>The biggest mistake I did was not having a plan ready for the challenge. I had a very rough idea
about what I wanted to do but my 'design document' was basically non-existent and I followed a
'design-as-you-code' philosophy. This led to a lot of wasted time because for each design iteration
I scrapped parts of the code and rewrote them. The fact that I also wrote specs which I had to fix
after scrapping code made it even worse. The specs were in general quite useful though because I
didn't encounter any weird bugs and was quite confident in my code base over the course of the
challenge</p>

<h3>#2 - Stick to your plan</h3>

<p>When you have a plan, you should really stick to your plan because there is probably not enough time
for implementing that cool idea that just came to your mind. So instead of immediately implementing
  it, you should write it down and <em>maybe</em> implement at the end <em>if</em> there is some time left. I
  basically spent all of day 5 on implementing a mech ascii art in the UI and coloring it based on the
  amount of damage it has taken. Although its looks cool, a simple bar or numeric value would have done
  the same job and would have cost me only a fraction of the time.</p>

<h3>#3 - Go offline</h3>

<p>Whenever I opened my browser to have a look at the Ruby/Gosu docs or searching for a specific
problem on Stackoverflow I just couldn't resist to have a quick glance at my mails, or Facebook, or
7drl.org, or ..., you know the story. This was a <em>huge</em> time sink. My most productive three hours
were at starbucks where I had no working internet and did just focus on <a href="http://programming-motherfucker.com/">Programming, Motherfucker !</a> This also leads me to lesson #4</p>

<h3>#4 - Lock your room</h3>

<p>I don't know how often I explained my girlfriend that whenever she interrupts my flow by asking me
'where I put here whatever' or wanting me to 'just open that tin' I totally lose my train of thought
and need at least 15-30 minutes to get back to the state I was in. This usually also leads to nasty
bugs because you just forgot something that you wanted (needed) to do. I really think
non-programmers just can't understand that stuff</p>

<h3>#5 - Know your frameworks</h3>

<p>I lost about half a day by getting familiar with Gosu and would have lost even more if I would have
used Chingu or the Ruby wrapper for libtcod. But reinventing the wheel and implementing all by
yourself just doesn't work either. So, getting to know the frameworks you want to use beforehand is
crucial.</p>

<h3>#6 - Don't drink and code</h3>

<p>Yeah...didn't work :)</p>

<h2>7 days of coding and all I've got are those lousy screenshots</h2>

<p><img class="center" src="/images/posts/mechrl_1.png" width="640" height="480">
<img class="center" src="/images/posts/mechrl_2.png" width="640" height="480"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[7DRL 2012 - Day 1&amp;2: Recap]]></title>
    <link href="http://kmees.github.com/blog/2012/03/13/7drl-2012-day-1-and-2-recap/"/>
    <updated>2012-03-13T13:01:00+01:00</updated>
    <id>http://kmees.github.com/blog/2012/03/13/7drl-2012-day-1-and-2-recap</id>
    <content type="html"><![CDATA[<h2>Day 1</h2>

<p>I started the challenge on Sunday at around 2 pm. My Goal for the day was to get the player on the
screen and implement the mechlike movement. I had something running quite fast, after about an hour,
with basically two classes (the window and the mech). I then decided to refactor the stuff I had
into an actual architecture by decoupling the view logic from the game logic etc. That didn't really
work that well in the beginning because I was thinking too much in the .NET way which cost me a lot
of time. Another thing that cost me quite a lot of time was writing the specs in RSpec. I haven't
written any specs but only NUnit tests lately which ended in awful readable specs at first :)</p>

<!-- more -->


<p>Anyway, I spent about ~8 hours working on my 7DRL the first day but it didn't feel very productive.
I wasn't really able to get "In The Zone" during that day because looking up RSpec syntax and Gosu
API on the web distracted me more it should. Opening the browser when you want to be productive just
doesn't end well...</p>

<h2>Day 2</h2>

<p>Since I had to work I wasn't able to start before 6 pm that day. I wanted to finish most of the mech
class that day so I started writing specs for the mech. Writing specs went better than the day
before and I felt quite good. After dinner I coded for another 2 hours before becoming to tired to
move on.</p>

<p>All in all, I did get at least something done in the 4 hours I was able to work on the game but I'm
still way~~~ behind my non-existent schedule (that might be one of the main problems :)).</p>

<p>I hope to get something presentable out of Day 3 to upload some (interesting) screenshots but I'm
rather skeptical</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[7DRL 2012 - Day 0: Introducing MechRL]]></title>
    <link href="http://kmees.github.com/blog/2012/03/10/7drl-2012-day-0-introducing-mechrl/"/>
    <updated>2012-03-10T22:37:00+01:00</updated>
    <id>http://kmees.github.com/blog/2012/03/10/7drl-2012-day-0-introducing-mechrl</id>
    <content type="html"><![CDATA[<p>Although I didn't have that much time lately, I came up with an idea that is worth prototyping in a 7DRL. I was a huge fan of the MechWarrior franchise back in the late 90s and early 2000s. After watching the <a href="http://www.youtube.com/watch?v=udEAEARD-Fo">Hawken Gameplay Video</a> some time ago, I got a bit nostalgic and thought about doing a <em>MechWarriorlike Roguelike</em>. Through the lack of a better name (naming things is hard!), I'll simply call it MechRL.</p>

<!--more-->


<h2>Mechanics</h2>

<p>The movement of the mechs in MechWarrior was similar to that of a car in racing game. You had to accelerate/decelerate your mech and you weren't able to change directions immediately but you rather had to turn. The movement paramters like v_max and inertia where also influenced by the weight of the mech.</p>

<p>Another interesting mechanic was the combat which was closely related to movement. You were only able to shoot in the direction your mech was facing. Some mechs were able to turn their torso seperately from their legs which allowed you to perform some neat run-by attacks.</p>

<p>Those two mechanics embody the core mechanics for my roguelike. It will be quite interesesting to
see how these mechanics work in a turn-based environment. In case it won't work well, I might try a
hybrid approach instead of a turn-based one. The actual combat won't also be skill shot based like in
MechWarrior but something like VATS in Fallout 3.</p>

<h2>Dungeon Design</h2>

<p>The usual dungeon crawler'ish design for a roguelike won't really work for MechRL. Instead, I opt
for a non-linear mission design which drives a very simple story. I have about 7-10 missions planned
  currently. Most of the missions will all take place on the same map whose layout will be randomly
  generated. There will also be some kind of outpost which serves as the mission hub and a place to customize/upgrade your mech.</p>

<h2>Character Progress</h2>

<p>That brings me to the progression of your mech throughout the game. In the beginning, you will choose one of
~three starter mechs that differ in their playstyle (fast and agil, slow and heavy
armed,...). You will then be able to update the weapons and armor with stuff you find or completely
replace parts of the mech. There won't be alot of <strike>character</strike>mech stats but each part
of your mech will have its own durability.</p>

<h2>User Interface</h2>

<p>As for the UI, although the game won't run in a console, I will likely stick to ASCII art most of
the time. I'm not that at graphic design and it simply costs to much time that I won't have. I'll
also focus on keyboard input first and only add mouse support if I have some time left.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[7DRL 2012 - Day 0: Weapons of Choice]]></title>
    <link href="http://kmees.github.com/blog/2012/03/10/7drl-2012-choose-your-weapons/"/>
    <updated>2012-03-10T13:37:00+01:00</updated>
    <id>http://kmees.github.com/blog/2012/03/10/7drl-2012-choose-your-weapons</id>
    <content type="html"><![CDATA[<p>Alright, I'm gonna start my 7DRL Challenge tomorrow around noon. I wanted to start today, but I
spent most of day setting up my system and testing the libraries I want to use. My development
environment will be:</p>

<ul>
<li>OS: Virtualized Ubuntu 11.10</li>
<li>Platform: Ruby

<ul>
<li>Gosu (Game Framework)</li>
<li>Rspec (BDD Framework)</li>
<li>Autotest</li>
</ul>
</li>
<li>VCS: Git</li>
<li>Editor: GVim</li>
</ul>


<p>I'll try to develop the game using BDD and a test-first approach albeit it might slow me down in the beginning. But I hope that in the end it will pay off by having less bugs and broken features. Anyway, the plan is to spend the last day on polishing stuff instead of debugging.</p>

<p>The project will be hosted on <a href="https://github.com/kmees/MechRL">Github</a> and I was able to setup
XSplit, so I'll stream while coding. Will be interesting to see if I get at least one viewer :). My <a href="http://www.twitch.tv/">twich.tv</a> channel can be found <a href="http://www.twitch.tv/kmees">here</a>.</p>
]]></content>
  </entry>
  
</feed>
