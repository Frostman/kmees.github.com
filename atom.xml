<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Kevin Mees]]></title>
  <link href="http://kmees.github.com/atom.xml" rel="self"/>
  <link href="http://kmees.github.com/"/>
  <updated>2012-03-30T00:02:50+02:00</updated>
  <id>http://kmees.github.com/</id>
  <author>
    <name><![CDATA[Kevin Mees]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Bypassing the Google Feed API Cache]]></title>
    <link href="http://kmees.github.com/blog/2012/03/29/bypassing-the-google-feed-api-cache/"/>
    <updated>2012-03-29T23:22:00+02:00</updated>
    <id>http://kmees.github.com/blog/2012/03/29/bypassing-the-google-feed-api-cache</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://kmees.github.com/images/posts/google_feed_api_meme.png"></p>

<p>I noticed recently that the download count of the packages in my <a href="https://github.com/kmees/Octopress-NuGet-Aside">NuGet Aside</a> didn&#8217;t update properly. As I <a href="http://kmees.github.com/blog/2012/02/29/nuget-aside-for-octopress/">mentioned earlier</a>, I use the <a href="https://developers.google.com/feed/">Google Feed API</a> to get the data from the NuGet Gallery feed of an author. This indicrection is needed because the NuGet Gallery API doesn&#8217;t support the <strong>jsonp</strong> response type (yet). Anyway, the problem is that Google caches the feeds heavily and only adds new entries but doesn&#8217;t update existing ones. This means that the packages keep their download count of the first request.</p>

<!--more-->


<p>After some experiments, I concluded that the caching behavior is solely based on the feed URL and modifying the URL in a way that it &#8216;looks&#8217; different but still returns the same data circumvents the cache. I created a salt function that returns a large number based on the current time which I just append to the URL as an additional query parameter (that gets ignored by the API).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">salt</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">now</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">saltDate</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="nx">now</span><span class="p">.</span><span class="nx">getUTCFullYear</span><span class="p">(),</span> <span class="nx">now</span><span class="p">.</span><span class="nx">getUTCMonth</span><span class="p">(),</span> <span class="nx">now</span><span class="p">.</span><span class="nx">getUTCDate</span><span class="p">());</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">saltDate</span><span class="p">.</span><span class="nx">getTime</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you may notice, the function returns the same number throughout the whole day. This way, the feed can still be cached but the data gets updated every day which is a good compromise !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[unicodetiles.rb]]></title>
    <link href="http://kmees.github.com/blog/2012/03/26/unicodetiles-dot-rb/"/>
    <updated>2012-03-26T10:29:00+02:00</updated>
    <id>http://kmees.github.com/blog/2012/03/26/unicodetiles-dot-rb</id>
    <content type="html"><![CDATA[<p>After my miserable fail at the 7DRL 2012 I had the urge to get at least something get at least
something useful done. So I decided to port <a href="http://tapio.github.com/unicodetiles.js/">unicodetiles.js</a>, a lightweight, character based tile engine for JavaScript to Ruby. Luckily, tapio, the author of unicodetiles.js, made it easy for me to find a name for the ruby port and it shall henceforth be called <a href="./projects/unicodetiles.html">unicodetiles.rb</a>.</p>

<p>Porting the JavaScript code to Ruby went quite smoothly and I tried to &#8216;rubify&#8217; the code wherever possible. I decided to implement the renderer on top of the gosu gem because it gave me all the tools I needed, especially the Gosu::Font class came in quite handy. The port is feature equivalent to the JavaScript version and the examples are exactly the same. I plan on adding some more features and use it for my next (7 Day?) Roguelike project and I will also release a gem in the next few days when everything is implemented and tested.</p>

<p>Unicodetiles.rb also works quite well as a replacement for ncurses, a popular framework for writing
fancy console applications used by a lot of roguelikes. The downside to ncurses is, that it is quite
hard (or even impossible) to get running under Windows which really hampers the popularity of some
roguelikes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CMContrib 1.0.1 Released]]></title>
    <link href="http://kmees.github.com/blog/2012/03/24/cmcontrib-1-dot-0-1-released/"/>
    <updated>2012-03-24T19:30:00+01:00</updated>
    <id>http://kmees.github.com/blog/2012/03/24/cmcontrib-1-dot-0-1-released</id>
    <content type="html"><![CDATA[<p>I just released a new version of <a href="./projects/cmcontrib.html" title="">CMContrib</a> on
<a href="http://nuget.org/packages/Caliburn.Micro-Contrib">NuGet</a>. The new version just has some minor fixes
but the CMContrib assembly is now <em>strongly named</em> !</p>

<p>Grab it while it&#8217;s hot !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[7DRL 2012 - It's over !]]></title>
    <link href="http://kmees.github.com/blog/2012/03/18/7drl-2012-its-over/"/>
    <updated>2012-03-18T14:00:00+01:00</updated>
    <id>http://kmees.github.com/blog/2012/03/18/7drl-2012-its-over</id>
    <content type="html"><![CDATA[<p>It&#8217;s Sunday, March 18th and exactly 7 days ago I started my 7DRL Challenge. Sadly, I wasn&#8217;t able to
finish my roguelike in time but it was fun nevertheless. If I had to put a number on the
completeness of the game, I would say it&#8217;s about 33% finished, but not really playable since I spent (wasted?) too much on time on the implementation of the Mech class and the UI instead of adding content/combat. In retrospect, I see a lot of room for improvements and I will write them down here such that I won&#8217;t do the same mistakes twice in next years 7DRL !</p>

<!--more-->


<h2>Lessons Learned</h2>

<h3>#1 - Have a plan</h3>

<p>The biggest mistake I did was not having a plan ready for the challenge. I had a very rough idea
about what I wanted to do but my &#8216;design document&#8217; was basically non-existent and I followed a
&#8216;design-as-you-code&#8217; philosophy. This led to a lot of wasted time because for each design iteration
I scrapped parts of the code and rewrote them. The fact that I also wrote specs which I had to fix
after scrapping code made it even worse. The specs were in general quite useful though because I
didn&#8217;t encounter any weird bugs and was quite confident in my code base over the course of the
challenge</p>

<h3>#2 - Stick to your plan</h3>

<p>When you have a plan, you should really stick to your plan because there is probably not enough time
for implementing that cool idea that just came to your mind. So instead of immediately implementing
  it, you should write it down and <em>maybe</em> implement at the end <em>if</em> there is some time left. I
  basically spent all of day 5 on implementing a mech ascii art in the UI and coloring it based on the
  amount of damage it has taken. Although its looks cool, a simple bar or numeric value would have done
  the same job and would have cost me only a fraction of the time.</p>

<h3>#3 - Go offline</h3>

<p>Whenever I opened my browser to have a look at the Ruby/Gosu docs or searching for a specific
problem on Stackoverflow I just couldn&#8217;t resist to have a quick glance at my mails, or Facebook, or
7drl.org, or &#8230;, you know the story. This was a <em>huge</em> time sink. My most productive three hours
were at starbucks where I had no working internet and did just focus on <a href="http://programming-motherfucker.com/">Programming, Motherfucker !</a> This also leads me to lesson #4</p>

<h3>#4 - Lock your room</h3>

<p>I don&#8217;t know how often I explained my girlfriend that whenever she interrupts my flow by asking me
&#8216;where I put here whatever&#8217; or wanting me to &#8216;just open that tin&#8217; I totally lose my train of thought
and need at least 15-30 minutes to get back to the state I was in. This usually also leads to nasty
bugs because you just forgot something that you wanted (needed) to do. I really think
non-programmers just can&#8217;t understand that stuff</p>

<h3>#5 - Know your frameworks</h3>

<p>I lost about half a day by getting familiar with Gosu and would have lost even more if I would have
used Chingu or the Ruby wrapper for libtcod. But reinventing the wheel and implementing all by
yourself just doesn&#8217;t work either. So, getting to know the frameworks you want to use beforehand is
crucial.</p>

<h3>#6 - Don&#8217;t drink and code</h3>

<p>Yeah&#8230;didn&#8217;t work :)</p>

<h2>7 days of coding and all I&#8217;ve got are those lousy screenshots</h2>

<p><img class="center" src="http://kmees.github.com/images/posts/mechrl_1.png" width="640" height="480">
<img class="center" src="http://kmees.github.com/images/posts/mechrl_2.png" width="640" height="480"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[7DRL 2012 - Day 1&amp;2: Recap]]></title>
    <link href="http://kmees.github.com/blog/2012/03/13/7drl-2012-day-1-and-2-recap/"/>
    <updated>2012-03-13T13:01:00+01:00</updated>
    <id>http://kmees.github.com/blog/2012/03/13/7drl-2012-day-1-and-2-recap</id>
    <content type="html"><![CDATA[<h2>Day 1</h2>

<p>I started the challenge on Sunday at around 2 pm. My Goal for the day was to get the player on the
screen and implement the mechlike movement. I had something running quite fast, after about an hour,
with basically two classes (the window and the mech). I then decided to refactor the stuff I had
into an actual architecture by decoupling the view logic from the game logic etc. That didn&#8217;t really
work that well in the beginning because I was thinking too much in the .NET way which cost me a lot
of time. Another thing that cost me quite a lot of time was writing the specs in RSpec. I haven&#8217;t
written any specs but only NUnit tests lately which ended in awful readable specs at first :)</p>

<!-- more -->


<p>Anyway, I spent about ~8 hours working on my 7DRL the first day but it didn&#8217;t feel very productive.
I wasn&#8217;t really able to get &#8220;In The Zone&#8221; during that day because looking up RSpec syntax and Gosu
API on the web distracted me more it should. Opening the browser when you want to be productive just
doesn&#8217;t end well&#8230;</p>

<h2>Day 2</h2>

<p>Since I had to work I wasn&#8217;t able to start before 6 pm that day. I wanted to finish most of the mech
class that day so I started writing specs for the mech. Writing specs went better than the day
before and I felt quite good. After dinner I coded for another 2 hours before becoming to tired to
move on.</p>

<p>All in all, I did get at least something done in the 4 hours I was able to work on the game but I&#8217;m
still way~~~ behind my non-existent schedule (that might be one of the main problems :)).</p>

<p>I hope to get something presentable out of Day 3 to upload some (interesting) screenshots but I&#8217;m
rather skeptical</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[7DRL 2012 - Day 0: Introducing MechRL]]></title>
    <link href="http://kmees.github.com/blog/2012/03/10/7drl-2012-day-0-introducing-mechrl/"/>
    <updated>2012-03-10T22:37:00+01:00</updated>
    <id>http://kmees.github.com/blog/2012/03/10/7drl-2012-day-0-introducing-mechrl</id>
    <content type="html"><![CDATA[<p>Although I didn&#8217;t have that much time lately, I came up with an idea that is worth prototyping in a 7DRL. I was a huge fan of the MechWarrior franchise back in the late 90s and early 2000s. After watching the <a href="http://www.youtube.com/watch?v=udEAEARD-Fo">Hawken Gameplay Video</a> some time ago, I got a bit nostalgic and thought about doing a <em>MechWarriorlike Roguelike</em>. Through the lack of a better name (naming things is hard!), I&#8217;ll simply call it MechRL.</p>

<!--more-->


<h2>Mechanics</h2>

<p>The movement of the mechs in MechWarrior was similar to that of a car in racing game. You had to accelerate/decelerate your mech and you weren&#8217;t able to change directions immediately but you rather had to turn. The movement paramters like v_max and inertia where also influenced by the weight of the mech.</p>

<p>Another interesting mechanic was the combat which was closely related to movement. You were only able to shoot in the direction your mech was facing. Some mechs were able to turn their torso seperately from their legs which allowed you to perform some neat run-by attacks.</p>

<p>Those two mechanics embody the core mechanics for my roguelike. It will be quite interesesting to
see how these mechanics work in a turn-based environment. In case it won&#8217;t work well, I might try a
hybrid approach instead of a turn-based one. The actual combat won&#8217;t also be skill shot based like in
MechWarrior but something like VATS in Fallout 3.</p>

<h2>Dungeon Design</h2>

<p>The usual dungeon crawler&#8217;ish design for a roguelike won&#8217;t really work for MechRL. Instead, I opt
for a non-linear mission design which drives a very simple story. I have about 7-10 missions planned
  currently. Most of the missions will all take place on the same map whose layout will be randomly
  generated. There will also be some kind of outpost which serves as the mission hub and a place to customize/upgrade your mech.</p>

<h2>Character Progress</h2>

<p>That brings me to the progression of your mech throughout the game. In the beginning, you will choose one of
~three starter mechs that differ in their playstyle (fast and agil, slow and heavy
armed,&#8230;). You will then be able to update the weapons and armor with stuff you find or completely
replace parts of the mech. There won&#8217;t be alot of <strike>character</strike>mech stats but each part
of your mech will have its own durability.</p>

<h2>User Interface</h2>

<p>As for the UI, although the game won&#8217;t run in a console, I will likely stick to ASCII art most of
the time. I&#8217;m not that at graphic design and it simply costs to much time that I won&#8217;t have. I&#8217;ll
also focus on keyboard input first and only add mouse support if I have some time left.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[7DRL 2012 - Day 0: Weapons of Choice]]></title>
    <link href="http://kmees.github.com/blog/2012/03/10/7drl-2012-choose-your-weapons/"/>
    <updated>2012-03-10T13:37:00+01:00</updated>
    <id>http://kmees.github.com/blog/2012/03/10/7drl-2012-choose-your-weapons</id>
    <content type="html"><![CDATA[<p>Alright, I&#8217;m gonna start my 7DRL Challenge tomorrow around noon. I wanted to start today, but I
spent most of day setting up my system and testing the libraries I want to use. My development
environment will be:</p>

<ul>
<li>OS: Virtualized Ubuntu 11.10</li>
<li>Platform: Ruby

<ul>
<li>Gosu (Game Framework)</li>
<li>Rspec (BDD Framework)</li>
<li>Autotest</li>
</ul>
</li>
<li>VCS: Git</li>
<li>Editor: GVim</li>
</ul>


<p>I&#8217;ll try to develop the game using BDD and a test-first approach albeit it might slow me down in the beginning. But I hope that in the end it will pay off by having less bugs and broken features. Anyway, the plan is to spend the last day on polishing stuff instead of debugging.</p>

<p>The project will be hosted on <a href="https://github.com/kmees/MechRL">Github</a> and I was able to setup
XSplit, so I&#8217;ll stream while coding. Will be interesting to see if I get at least one viewer :). My <a href="http://www.twitch.tv/">twich.tv</a> channel can be found <a href="http://www.twitch.tv/kmees">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[7DRL 2012 - Challenge Accepted]]></title>
    <link href="http://kmees.github.com/blog/2012/03/07/7drl-2012-challenge-accepted/"/>
    <updated>2012-03-07T17:11:00+01:00</updated>
    <id>http://kmees.github.com/blog/2012/03/07/7drl-2012-challenge-accepted</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://kmees.github.com/images/posts/challenge_accepted.png"></p>

<p>From March 10th to March 18th, this years <a href="http://roguebasin.roguelikedevelopment.org/index.php/Seven_Day_Roguelike_Challenge">Seven Day Roguelike Challenge</a> takes place. The goal of the challenge is to create a roguelike game in, well, seven days. I actually tried to participate in last years challenge, but due to a car accident about a week before the challenge, I wasn&#8217;t really able to focus on it. Hopefully, this years challenge runs smoothly for me such that I can get a game finished.</p>

<p>I will try to blog about my progress on each of the seven days if I can manage to find some spare
time. I&#8217;m also thinking about streaming/recording the development process but I don&#8217;t know if I can
get everything set up in time. In any case, the project will of course be hosted on github !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Aside for Octopress]]></title>
    <link href="http://kmees.github.com/blog/2012/02/29/nuget-aside-for-octopress/"/>
    <updated>2012-02-29T15:37:00+01:00</updated>
    <id>http://kmees.github.com/blog/2012/02/29/nuget-aside-for-octopress</id>
    <content type="html"><![CDATA[<p>I just finished as aside for <a href="http://www.octopress.org">Octopress</a> that list the
Top N downloaded packages where you are an author. It also adds a link to your
NuGet gallery profile if you have one. The style is basically the same as the style of the github aside.</p>

<p>Since there is no official way to publish 3rd party add-ons for Octopress yet, I
created a <a href="https://github.com/kmees/Octopress-NuGet-Aside">github repository</a> with the required files and setup instructions in the <a href="https://github.com/kmees/Octopress-NuGet-Aside/blob/master/README.md">ReadMe</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CMContrib WPF Demo goin' Metro]]></title>
    <link href="http://kmees.github.com/blog/2012/02/26/cmcontrib-wpf-demo-goin-metro/"/>
    <updated>2012-02-26T18:45:00+01:00</updated>
    <id>http://kmees.github.com/blog/2012/02/26/cmcontrib-wpf-demo-goin-metro</id>
    <content type="html"><![CDATA[<p>Inspired by the <a href="https://github.com/Code52/DownmarkerWPF">DownmarkerWPF</a>, I
decided to change the Style of the CMContrib WPF Demo to Metro. I used the same
Metro framework, namely <a href="https://github.com/MahApps/MahApps.Metro">MahApps.Metro</a> as DownmarkerWPF which is really cool. The only control that I wasn&#8217;t able to &#8216;metroize&#8217; was the <em>WebBrowser</em> control which displays the code. Its scrollbars still have the old Windows look. Another small letdown is that there is no free <em>Pivot</em> control available for WPF but it was quite easy to create a simplified version of it which was sufficient for my needs.</p>

<p>Anyway, I&#8217;m quite happy with the result especially since this is my first Metro app. Any feedback is appreciated !</p>

<!--more-->


<h2>Metro Style</h2>

<p><img src="http://kmees.github.com/images/posts/wpfdemo_metro.png" width="640" height="480"></p>

<h2>Old Style</h2>

<p><img src="http://kmees.github.com/images/posts/wpfdemo_old.png" width="640" height="480"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Context-Based Views for Dialogs]]></title>
    <link href="http://kmees.github.com/blog/2012/02/24/context-based-views-for-dialogs/"/>
    <updated>2012-02-24T11:32:00+01:00</updated>
    <id>http://kmees.github.com/blog/2012/02/24/context-based-views-for-dialogs</id>
    <content type="html"><![CDATA[<h2>Retrospect</h2>

<p>In my <a href="http://kmees.github.com/projects/cmcontrib.html">CMContrib Project</a> I use a MVVM approach for
showing dialogs to the user. The model for the dialog has a <em>dialog type</em>
(Question, Error,&#8230;), a <em>subject</em> (or title), a <em>message</em> and a list of
possible <em>responses</em> the user can choose from. The default response in CMContrib
is an Answer enum with values for <em>Ok, Cancel, Yes</em> and all the other standard
answers but you can also use a complex type as a response.</p>

<p>Here&#8217;s an example of how to ask the user a question and cancel the coroutine
when the user responses with <em>No</em>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">override</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">IResult</span><span class="p">&gt;</span> <span class="n">AskAQuestion</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">question</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Question</span><span class="p">(</span><span class="s">&quot;The Subject&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;The Message&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">Answer</span><span class="p">.</span><span class="n">Yes</span><span class="p">,</span>
</span><span class='line'>        <span class="n">Answer</span><span class="p">.</span><span class="n">No</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">yield</span> <span class="k">return</span> <span class="n">question</span><span class="p">.</span><span class="n">AsResult</span><span class="p">()</span>
</span><span class='line'>        <span class="p">.</span><span class="n">CancelOnResponse</span><span class="p">(</span><span class="n">Answer</span><span class="p">.</span><span class="n">No</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<h2>One View to show them all (again)</h2>

<p>The call <code>.AsResult()</code> on a dialog wraps it in a <code>DialogViewModel</code> which is then
passed to Caliburn.Micro&#8217;s <code>IWindowManager</code> and shown as a modular dialog. The problem
with that approach is, that the same default view, which is <code>Caliburn.Micro.Contrib.Dialogs.DialogView</code> unless you added a namespace alias, is resolved for all types of dialogs. Now, if you need a special view for, let&#8217;s say errors only, you are in trouble.</p>

<p>But fear not, because Caliburn already has a solution to that problem, namely <em>view contexts</em>, which are explained <a href="http://devlicio.us/blogs/rob_eisenberg/archive/2010/11/18/caliburn-micro-soup-to-nuts-part-6d-a-billy-hollis-hybrid-shell.aspx">here</a>. Since each dialog already has a <em>dialog type</em> we can use that as our view context. The change to show the context based view instead of the default view couldn&#8217;t be easier, it&#8217;s just one line in the <code>DialogResult</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">IResult</span><span class="p">&gt;</span> <span class="n">Execute</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">IDialogViewModel</span><span class="p">&lt;</span><span class="n">TResponse</span><span class="p">&gt;</span> <span class="n">vm</span> <span class="p">=</span> <span class="n">_locateVM</span><span class="p">();</span>
</span><span class='line'>    <span class="n">vm</span><span class="p">.</span><span class="n">Dialog</span> <span class="p">=</span> <span class="n">Dialog</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// ommitted unrelevant parts</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// show without context</span>
</span><span class='line'>    <span class="c1">// Micro.Execute.OnUIThread(() =&gt; IoC.Get&lt;IWindowManager&gt;().ShowDialog(vm));</span>
</span><span class='line'>    <span class="n">Micro</span><span class="p">.</span><span class="n">Execute</span><span class="p">.</span><span class="n">OnUIThread</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">IoC</span><span class="p">.</span><span class="n">Get</span><span class="p">&lt;</span><span class="n">IWindowManager</span><span class="p">&gt;().</span><span class="n">ShowDialog</span><span class="p">(</span><span class="n">vm</span><span class="p">,</span> <span class="n">Dialog</span><span class="p">.</span><span class="n">DialogType</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now the default view for an <em>Error</em> is <code>Caliburn.Micro.Contrib.Dialogs.Error</code>.
Okay cool, but what happens if we want to show a <em>Question</em>? Well, we get an
error because there is looks for the view
<code>Caliburn.Micro.Contrib.Dialogs.Question</code> which doesn&#8217;t exist and which we don&#8217;t
want to create. Instead, we want to use the default <code>DialogView</code> as a fallback view.</p>

<h2>Changing the ViewLocator</h2>

<p>Since we want to change the way how views are located, the <code>ViewLocator</code> might
be a good class to look at. The function responsible for locating the view type for
a view model type is called <code>LocateTypeForModelType</code>. In a nutshell, this function takes the
type of the view model and the view context, transforms those into a list of
possible view type names and searches for a type in the assemblies that matches
one of the names. If none is found, <code>null</code> will be returned and Caliburn.Micro
shows the &#8220;Could not locate view for &#8230;&#8221; error view that you might have seen
before.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="n">Func</span><span class="p">&lt;</span><span class="n">Type</span><span class="p">,</span> <span class="n">DependencyObject</span><span class="p">,</span> <span class="kt">object</span><span class="p">,</span> <span class="n">Type</span><span class="p">&gt;</span> <span class="n">LocateTypeForModelType</span> <span class="p">=</span> <span class="p">(</span><span class="n">modelType</span><span class="p">,</span> <span class="n">displayLocation</span><span class="p">,</span> <span class="n">context</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">viewTypeName</span> <span class="p">=</span> <span class="n">modelType</span><span class="p">.</span><span class="n">FullName</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">Execute</span><span class="p">.</span><span class="n">InDesignMode</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">viewTypeName</span> <span class="p">=</span> <span class="n">ModifyModelTypeAtDesignTime</span><span class="p">(</span><span class="n">viewTypeName</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">viewTypeName</span> <span class="p">=</span> <span class="n">viewTypeName</span><span class="p">.</span><span class="n">Substring</span><span class="p">(</span>
</span><span class='line'>        <span class="m">0</span><span class="p">,</span>
</span><span class='line'>        <span class="n">viewTypeName</span><span class="p">.</span><span class="n">IndexOf</span><span class="p">(</span><span class="s">&quot;`&quot;</span><span class="p">)</span> <span class="p">&lt;</span> <span class="m">0</span>
</span><span class='line'>            <span class="p">?</span> <span class="n">viewTypeName</span><span class="p">.</span><span class="n">Length</span>
</span><span class='line'>            <span class="p">:</span> <span class="n">viewTypeName</span><span class="p">.</span><span class="n">IndexOf</span><span class="p">(</span><span class="s">&quot;`&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">var</span> <span class="n">viewTypeList</span> <span class="p">=</span> <span class="n">TransformName</span><span class="p">(</span><span class="n">viewTypeName</span><span class="p">,</span> <span class="n">context</span><span class="p">);</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">viewType</span> <span class="p">=</span> <span class="n">viewTypeList</span><span class="p">.</span><span class="n">Join</span><span class="p">(</span><span class="n">AssemblySource</span><span class="p">.</span><span class="n">Instance</span><span class="p">.</span><span class="n">SelectMany</span><span class="p">(</span><span class="n">a</span> <span class="p">=&gt;</span> <span class="n">a</span><span class="p">.</span><span class="n">GetExportedTypes</span><span class="p">()),</span> <span class="n">n</span> <span class="p">=&gt;</span> <span class="n">n</span><span class="p">,</span> <span class="n">t</span> <span class="p">=&gt;</span> <span class="n">t</span><span class="p">.</span><span class="n">FullName</span><span class="p">,</span> <span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">t</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">t</span><span class="p">).</span><span class="n">FirstOrDefault</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">viewType</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Log</span><span class="p">.</span><span class="n">Warn</span><span class="p">(</span><span class="s">&quot;View not found. Searched: {0}.&quot;</span><span class="p">,</span> <span class="kt">string</span><span class="p">.</span><span class="n">Join</span><span class="p">(</span><span class="s">&quot;, &quot;</span><span class="p">,</span> <span class="n">viewTypeList</span><span class="p">.</span><span class="n">ToArray</span><span class="p">()));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">viewType</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, we basically have two options. Either we replace the function with one that
tries to locate the view without a context when the default function returns
null or we replace the <code>TransformName</code> function to also return the type names
without a view context.
I opted for the second options because it is easier to implement and other
function that use <code>TransformName</code> benefit from that change, too.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">static</span> <span class="k">readonly</span> <span class="n">Func</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span><span class="kt">object</span><span class="p">,</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;&gt;</span> <span class="n">_baseTransformName</span> <span class="p">=</span> <span class="n">Micro</span><span class="p">.</span><span class="n">ViewLocator</span><span class="p">.</span><span class="n">TransformName</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">FallbackNameTransform</span><span class="p">(</span><span class="kt">string</span> <span class="n">typeName</span><span class="p">,</span> <span class="kt">object</span> <span class="n">context</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">names</span> <span class="p">=</span> <span class="n">_baseTransformName</span><span class="p">(</span><span class="n">typeName</span><span class="p">,</span> <span class="n">context</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">context</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">names</span> <span class="p">=</span> <span class="n">names</span><span class="p">.</span><span class="n">Union</span><span class="p">(</span><span class="n">_baseTransformName</span><span class="p">(</span><span class="n">typeName</span><span class="p">,</span> <span class="k">null</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">names</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The implementation is pretty straight-forward. Since the <code>ViewLocator</code> returns the first view type found, we simply append the name(s) of the fallback view(s) to the list of names given by: the default <code>TransformName</code>.</p>

<h2>Even more customization !</h2>

<p>If you need a different view for <em>Errors</em> and <em>Questions</em>, you might also need
different views for different <em>Questions</em>! Let&#8217;s say we have views named
<code>My.Namespace.FooQuestion</code> and <code>My.Namespace.BarQuestion</code> which we want to use for different
kinds of Questions. We add a <code>ContextPrefix</code> to the <code>DialogResult</code> and create
the view context by concatenating the <code>ContextPrefix</code> and <code>DialogType</code>. Adding a
fluent configuration for the prefix to the <code>DialogResult</code> gives us this nice
syntax to for showing the <code>FooQuestion</code> view.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">override</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">IResult</span><span class="p">&gt;</span> <span class="n">Execute</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">question</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dialog</span><span class="p">&lt;</span><span class="n">SpecialAnswer</span><span class="p">&gt;(</span><span class="n">DialogType</span><span class="p">.</span><span class="n">Question</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;Why am I so uncreative&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="k">new</span> <span class="nf">SpecialAnswer</span><span class="p">(</span><span class="s">&quot;Because!&quot;</span><span class="p">),</span>
</span><span class='line'>        <span class="k">new</span> <span class="nf">SpecialAnswer</span><span class="p">(</span><span class="s">&quot;Dunno.&quot;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">yield</span> <span class="k">return</span> <span class="n">question</span><span class="p">.</span><span class="n">AsResult</span><span class="p">()</span>
</span><span class='line'>        <span class="p">.</span><span class="n">PrefixViewContextWith</span><span class="p">(</span><span class="s">&quot;Foo&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Appendix</h2>

<h3>I: Note on Namespace aliases</h3>

<p>In case you don&#8217;t want to put your custom dialog views in the <code>Caliburn.Micro.Contrib.Dialogs</code> namespace, just add a namespace alias the <code>ViewLocator</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">ViewLocator</span><span class="p">.</span><span class="n">AddSubNamespaceMapping</span><span class="p">(</span><span class="s">&quot;Caliburn.Micro.Contrib.Dialogs&quot;</span><span class="p">,</span> <span class="s">&quot;My.Namespace.Views&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>II: Online Silverlight Demo</h3>

<p>Although I added an example for this feature to the Silverlight demo, it
currently crashes each browser when embedded in a page. Out-of-browser works
though. If you know why, tell me ! Will update the demo once it works.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CMContrib 1.0 released]]></title>
    <link href="http://kmees.github.com/blog/2012/02/08/cmcontrib-1-dot-0-released/"/>
    <updated>2012-02-08T22:38:00+01:00</updated>
    <id>http://kmees.github.com/blog/2012/02/08/cmcontrib-1-dot-0-released</id>
    <content type="html"><![CDATA[<p>I just uploaded <a href="http://nuget.org/packages/Caliburn.Micro-Contrib">CMContrib 1.0</a> to NuGet. I also created a <a href="http://kmees.github.com/projects/cmcontrib.html">CMContrib project
page</a> with additional info about the features and a Silverlight Demo with samples for each feature.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migration to Octopress]]></title>
    <link href="http://kmees.github.com/blog/2011/11/29/migration-to-octopress/"/>
    <updated>2011-11-29T23:44:00+01:00</updated>
    <id>http://kmees.github.com/blog/2011/11/29/migration-to-octopress</id>
    <content type="html"><![CDATA[<p>I am currently migrating my blog from <em>Wordpress</em> to <em>Octopress</em>. The main
reason for the migration is the awful (at least for coding blogs) post editor in
Wordpress. With the migration I can write the posts in Markdown and Vim which,
hopefully, leads to more posts !</p>

<p>And because Octopress is new and shiny and geeky !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MVVM Dialogs with Caliburn.Micro]]></title>
    <link href="http://kmees.github.com/blog/2011/06/16/mvvm-dialogs-with-caliburn-dot-micro/"/>
    <updated>2011-06-16T21:10:00+02:00</updated>
    <id>http://kmees.github.com/blog/2011/06/16/mvvm-dialogs-with-caliburn-dot-micro</id>
    <content type="html"><![CDATA[<h2>Background</h2>

<p>In every applications life there comes a time when you need to show some kind of message to the user. Be it a question whether he really wants to delete something or a simple message that says that some operation was successful. The most simple way to do that is the good ol&#8217; <code>MessageBox.Show()</code> with its zillion overloads.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">MessageBox</span><span class="p">.</span><span class="n">Show</span><span class="p">(</span><span class="s">&quot;Foo&quot;</span><span class="p">,</span> <span class="s">&quot;Bar&quot;</span><span class="p">,</span> <span class="n">MessageBoxButton</span><span class="p">.</span><span class="n">OKCancel</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>But in the shiny MVVM World , polluting your ViewModels with MessageBoxes is usually frowned upon since it breaks a lot of stuff, especially automated unit testing and theming.</p>

<p>You can find quite a lot solutions about how the MVVM<em>ize</em> MesasgeBoxes and dialog screens in general. Most of them involve wrapping the <code>MessageBox.Show()</code> in some kind of IService, setting up some kind of event infrastructure and other funky stuff. Surprisingly, all of those solutions completely ignore the first M in <strong>M</strong>VVM, namely the Model, and none really tackles the problem at its heart.</p>

<!--more-->


<h2>Implementation</h2>

<h3>One Model to rule them all</h3>

<p>Well, let&#8217;s forget about all the View and ViewModel stuff for now. We will start by specifying what we actually want to achieve with a dialog.</p>

<p>We want to display some message concerning some topic and a list of possible Responses from which the user can choose one.</p>

<p>So, let&#8217;s create a model with conforms to those specifications</p>

<figure class='code'><figcaption><span>Dialog&lt;TResponse&gt;</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Dialog</span><span class="p">&lt;</span><span class="n">TResponse</span><span class="p">&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">DialogType</span> <span class="n">DialogType</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">Subject</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">Message</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">TResponse</span><span class="p">&gt;</span> <span class="n">PossibleResponses</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">protected</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">TResponse</span> <span class="n">GivenResponse</span> <span class="p">{</span><span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">bool</span> <span class="n">IsResponseGiven</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>DialogType</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">enum</span> <span class="n">DialogType</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">None</span><span class="p">,</span>
</span><span class='line'>    <span class="n">Question</span><span class="p">,</span>
</span><span class='line'>    <span class="n">Warning</span><span class="p">,</span>
</span><span class='line'>    <span class="n">Information</span><span class="p">,</span>
</span><span class='line'>    <span class="n">Error</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The DialogType in conjunction with the subject defines the topic and the rest is pretty much straightforward. We also need a IsResponseGiven Property so that we can distinguish between default and unset values because TResponse may or may not be a value type (and hence not nullable).</p>

<h3>One ViewModel to bind them</h3>

<p>The ViewModel is responsible for bringing the Responses in a bindable format and setting the response on the dialog when the user selects one. The ViewModel also handles the case where the user closes the window without giving any response at all.</p>

<p>For supporting default (the user presses <code>Enter</code>) and cancel (the user presses <code>Escape</code>) responses,  I will use a convention based approach, namely defining the first response in the list as the default response and the last response as the cancel response.</p>

<figure class='code'><figcaption><span>BindableResponse&lt;TResponse&gt;</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">BindableResponse</span><span class="p">&lt;</span><span class="n">TResponse</span><span class="p">&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">TResponse</span> <span class="n">Response</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">bool</span> <span class="n">IsDefault</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">bool</span> <span class="n">IsCancel</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>IDialogViewModel&lt;TResponse&gt;</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">interface</span> <span class="n">IDialogViewModel</span><span class="p">&lt;</span><span class="n">TResponse</span><span class="p">&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="n">IsClosed</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">Dialog</span><span class="p">&lt;</span><span class="n">TResponse</span><span class="p">&gt;</span> <span class="n">Dialog</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">IObservableCollection</span><span class="p">&lt;</span><span class="n">BindableResponse</span><span class="p">&lt;</span><span class="n">TResponse</span><span class="p">&gt;&gt;</span> <span class="n">Responses</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">void</span> <span class="nf">Respond</span><span class="p">(</span><span class="n">BindableResponse</span><span class="p">&lt;</span><span class="n">TResponse</span><span class="p">&gt;</span> <span class="n">bindableResponse</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The implementation is pretty straightforward and omitted for brevity but can be found here.</p>

<h3>One View to show them all</h3>

<p>I will present the WPF version of the view here because the SL version requires a workaround for the non existing <code>IsDefault</code>/<code>IsCancel</code> Properties of the Button. For those interested in the SL version, the source is here. I will also omit all irrelevant (styling) properties.</p>

<figure class='code'><figcaption><span>DialogView</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;Window</span> <span class="na">x:Class=</span><span class="s">&quot;Caliburn.Micro.Contrib.Interaction.DialogView&quot;</span>
</span><span class='line'>        <span class="na">Title=</span><span class="s">&quot;{Binding Dialog.Subject}&quot;</span>
</span><span class='line'>        <span class="na">Contrib:DialogCloser.DialogResult=</span><span class="s">&quot;{Binding CanClose}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Window.Icon&gt;</span>
</span><span class='line'>        <span class="nt">&lt;Binding</span> <span class="na">Path=</span><span class="s">&quot;Dialog.DialogType&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;Binding.Converter&gt;</span>
</span><span class='line'>                <span class="nt">&lt;Converter:DialogTypeToSystemIconConverter</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/Binding.Converter&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/Binding&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/Window.Icon&gt;</span>
</span><span class='line'>    <span class="nt">&lt;DockPanel</span> <span class="na">Focusable=</span><span class="s">&quot;False&quot;</span> <span class="na">LastChildFill=</span><span class="s">&quot;True&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;ItemsControl</span> <span class="na">x:Name=</span><span class="s">&quot;Responses&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;ItemsControl.ItemTemplate&gt;</span>
</span><span class='line'>                <span class="nt">&lt;DataTemplate&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;Button</span> <span class="na">Content=</span><span class="s">&quot;{Binding Response}&quot;</span>
</span><span class='line'>                            <span class="na">IsCancel=</span><span class="s">&quot;{Binding IsCancel}&quot;</span>
</span><span class='line'>                            <span class="na">IsDefault=</span><span class="s">&quot;{Binding IsDefault}&quot;</span>
</span><span class='line'>                            <span class="na">Micro:Message.Attach=</span><span class="s">&quot;Respond($dataContext)&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/DataTemplate&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/ItemsControl.ItemTemplate&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/ItemsControl&gt;</span>
</span><span class='line'>        <span class="nt">&lt;TextBlock</span> <span class="na">Text=</span><span class="s">&quot;{Binding Dialog.Message}&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/DockPanel&gt;</span>
</span><span class='line'><span class="nt">&lt;/Window&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The most important part is where we bind the Responses to an ItemsControl (by using Caliburn.Micros Convention Binding Feature) and create a Button for each Response which will call the Respond() Method on the ViewModel with the bound Response as a parameter. The Subject of the Dialog is bound to the Title of the Window and the DialogType is converted to an Icon.</p>

<h3>And with the IResult show them</h3>

<p>No Caliburn.Micro Extension with the corresponding IResult to use them !</p>

<p>To actually show the dialog to the user, we would have to</p>

<ul>
<li>Create the dialog</li>
<li>Import the IWindowManager in the ViewModel</li>
<li>Create the ViewModel and pass it the dialog</li>
<li>Invoke ShowDialog() on the IWindowManager with the ViewModel as a parameter</li>
</ul>


<p>Well, the first step cannot be encapsulated in an IResult, but 2-4 rest can easily be encapsulated.</p>

<figure class='code'><figcaption><span>DialogResult&lt;TResponse&gt;</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">DialogResult</span><span class="p">&lt;</span><span class="n">TResponse</span><span class="p">&gt;</span> <span class="p">:</span> <span class="n">IResult</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="n">Func</span><span class="p">&lt;</span><span class="n">IDialogViewModel</span><span class="p">&lt;</span><span class="n">TResponse</span><span class="p">&gt;&gt;</span> <span class="n">_locateVM</span> <span class="p">=</span>
</span><span class='line'>        <span class="p">()</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="n">DialogViewModel</span><span class="p">&lt;</span><span class="n">TResponse</span><span class="p">&gt;();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nf">DialogResult</span><span class="p">(</span><span class="n">Dialog</span><span class="p">&lt;</span><span class="n">TResponse</span><span class="p">&gt;</span> <span class="n">dialog</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Dialog</span> <span class="p">=</span> <span class="n">dialog</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="n">Dialog</span><span class="p">&lt;</span><span class="n">TResponse</span><span class="p">&gt;</span> <span class="n">Dialog</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">void</span> <span class="nf">Execute</span><span class="p">(</span><span class="n">ActionExecutionContext</span> <span class="n">context</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">IDialogViewModel</span><span class="p">&lt;</span><span class="n">TResponse</span><span class="p">&gt;</span> <span class="n">vm</span> <span class="p">=</span> <span class="n">_locateVM</span><span class="p">();</span>
</span><span class='line'>        <span class="n">vm</span><span class="p">.</span><span class="n">Dialog</span> <span class="p">=</span> <span class="n">Dialog</span><span class="p">;</span>
</span><span class='line'>        <span class="n">Micro</span><span class="p">.</span><span class="n">Execute</span><span class="p">.</span><span class="n">OnUIThread</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">IoC</span><span class="p">.</span><span class="n">Get</span><span class="p">&lt;</span><span class="n">IWindowManager</span><span class="p">&gt;().</span><span class="n">ShowDialog</span><span class="p">(</span><span class="n">vm</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="n">DialogResult</span><span class="p">&lt;</span><span class="n">TResponse</span><span class="p">&gt;</span> <span class="n">In</span><span class="p">(</span><span class="n">IDialogViewModel</span><span class="p">&lt;</span><span class="n">TResponse</span><span class="p">&gt;</span> <span class="n">dialogViewModel</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">_locateVM</span> <span class="p">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">dialogViewModel</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="n">DialogResult</span><span class="p">&lt;</span><span class="n">TResponse</span><span class="p">&gt;</span> <span class="n">In</span><span class="p">&lt;</span><span class="n">TDialogViewModel</span><span class="p">&gt;()</span>
</span><span class='line'>        <span class="n">where</span> <span class="n">TDialogViewModel</span> <span class="p">:</span> <span class="n">IDialogViewModel</span><span class="p">&lt;</span><span class="n">TResponse</span><span class="p">&gt;</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">_locateVM</span> <span class="p">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">IoC</span><span class="p">.</span><span class="n">Get</span><span class="p">&lt;</span><span class="n">TDialogViewModel</span><span class="p">&gt;();</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We do not only get reusable code, but also a nice way to change the implementation of IDialogViewModel&lt;> for specific dialogs if we want to.</p>

<p>Last but not least we can write a small Extension Method to get even more readable code !</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="n">DialogResult</span><span class="p">&lt;</span><span class="n">TResponse</span><span class="p">&gt;</span> <span class="n">AsResult</span><span class="p">&lt;</span><span class="n">TResponse</span><span class="p">&gt;(</span><span class="k">this</span> <span class="n">Dialog</span><span class="p">&lt;</span><span class="n">TResponse</span><span class="p">&gt;</span> <span class="n">dialog</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">new</span> <span class="n">DialogResult</span><span class="p">&lt;</span><span class="n">TResponse</span><span class="p">&gt;(</span><span class="n">dialog</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And use it in the coroutine</p>

<figure class='code'><figcaption><span>Demo</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">IResult</span><span class="p">&gt;</span> <span class="n">Foo</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">question</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dialog</span><span class="p">&lt;</span><span class="n">Answer</span><span class="p">&gt;(</span><span class="n">DialogType</span><span class="p">.</span><span class="n">Question</span><span class="p">,</span>
</span><span class='line'>                                      <span class="s">&quot;Isn&#39;t this a nice way to create a Dialog Window?&quot;</span><span class="p">,</span>
</span><span class='line'>                                      <span class="n">Answer</span><span class="p">.</span><span class="n">Yes</span><span class="p">,</span>
</span><span class='line'>                                      <span class="n">Answer</span><span class="p">.</span><span class="n">No</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">yield</span> <span class="k">return</span> <span class="n">question</span><span class="p">.</span><span class="n">AsResult</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">question</span><span class="p">.</span><span class="n">GivenResponse</span> <span class="p">==</span> <span class="n">Answer</span><span class="p">.</span><span class="n">Yes</span><span class="p">)</span>
</span><span class='line'>        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot; ^_^ &quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot; :*( &quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Handling Errors in Caliburn.Micro's IResult - Part II]]></title>
    <link href="http://kmees.github.com/blog/2011/06/01/handling-errors-in-caliburn-dot-micros-iresult-part-ii/"/>
    <updated>2011-06-01T23:01:00+02:00</updated>
    <id>http://kmees.github.com/blog/2011/06/01/handling-errors-in-caliburn-dot-micros-iresult-part-ii</id>
    <content type="html"><![CDATA[<h2>Preface</h2>

<p>In my last post I gave two possible approaches and a preview of my final solution for handling errors in IResults. The syntax for my final solution was</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">yield</span> <span class="k">return</span> <span class="k">new</span> <span class="nf">ProcessDataResult</span><span class="p">()</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Rescue</span><span class="p">().</span><span class="n">With</span><span class="p">(</span><span class="n">coroutine</span><span class="p">:</span> <span class="n">IORescue</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Rescue</span><span class="p">().</span><span class="n">With</span><span class="p">(</span><span class="n">coroutine</span><span class="p">:</span> <span class="n">GeneralRescue</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This means that</p>

<ul>
<li>whenever the result completes with an error of type IOException, the IORescue coroutine is executed</li>
<li>whenever the result completes with any other error, the GeneralRescue coroutine is executed</li>
</ul>


<p>So the behaviour of the Rescue is similar to a try/catch block</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">try</span> <span class="p">{}</span>
</span><span class='line'><span class="k">catch</span> <span class="p">(</span><span class="n">IOException</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span> <span class="c1">//IORescue }</span>
</span><span class='line'><span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span> <span class="c1">//GeneralRescue }</span>
</span></code></pre></td></tr></table></div></figure>




<!--more-->


<h2>Decorators to the Rescue !</h2>

<p>Now, before we have a look at the implementation, you should make yourself familiar with the <a href="http://en.wikipedia.org/wiki/Decorator_pattern">Decorator Pattern</a> since we will use a Decorator to &#8216;extend&#8217; the behaviour of the Execute-Method of our Inner Result.</p>

<p>Well, let&#8217;s start with a base class for our decorators.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">internal</span> <span class="k">class</span> <span class="nc">ResultDecoratorBase</span> <span class="p">:</span> <span class="n">IResult</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">readonly</span> <span class="n">IResult</span> <span class="n">_inner</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">protected</span> <span class="nf">ResultDecoratorBase</span><span class="p">(</span><span class="n">IResult</span> <span class="n">inner</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">inner</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="n">ArgumentNullException</span><span class="p">(</span><span class="s">&quot;inner&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">_inner</span> <span class="p">=</span> <span class="n">inner</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="n">IResult</span> <span class="n">Inner</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">_inner</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cp">#region IResult Members</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">virtual</span> <span class="k">void</span> <span class="nf">Execute</span><span class="p">(</span><span class="n">ActionExecutionContext</span> <span class="n">context</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">var</span> <span class="n">wrapper</span> <span class="p">=</span> <span class="k">new</span> <span class="n">SequentialResult</span><span class="p">(</span><span class="k">new</span> <span class="n">SingleResultEnumerator</span><span class="p">(</span><span class="n">_inner</span><span class="p">));</span>
</span><span class='line'>        <span class="n">wrapper</span><span class="p">.</span><span class="n">Completed</span> <span class="p">+=</span> <span class="n">InnerCompleted</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">wrapper</span><span class="p">.</span><span class="n">Execute</span><span class="p">(</span><span class="n">context</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">virtual</span> <span class="k">event</span> <span class="n">EventHandler</span> <span class="n">Completed</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cp">#endregion</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">protected</span> <span class="k">virtual</span> <span class="k">void</span> <span class="nf">OnCompleted</span><span class="p">(</span><span class="n">ResultCompletionEventArgs</span> <span class="n">args</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">Completed</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>            <span class="n">Completed</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="n">args</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">protected</span> <span class="k">virtual</span> <span class="k">void</span> <span class="nf">InnerCompleted</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">ResultCompletionEventArgs</span> <span class="n">args</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="p">(</span><span class="n">sender</span> <span class="k">as</span> <span class="n">IResult</span><span class="p">).</span><span class="n">Completed</span> <span class="p">-=</span> <span class="n">InnerCompleted</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The base Decorator takes an arbitrary IResult and, when executed, wraps it in a SequentialResult (to get some benefits like build up by the IoC) and executes it. The InnerCompleted()-Method is the hook for the inheriting Decorators to perform their logic.</p>

<h2>The Rescue Decorator</h2>

<p>The Rescue Decorator will be generic (for the type that we want to catch) and takes a Function in its constructor which taked an exception as an argument and returns the Rescue Coroutine. We can also specify if we always want to cancel the Result after the rescue was executed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="c1">/// &lt;summary&gt;</span>
</span><span class='line'><span class="c1">///   A result decorator which executes a coroutine when the inner result completes with an error</span>
</span><span class='line'><span class="c1">/// &lt;/summary&gt;</span>
</span><span class='line'><span class="c1">/// &lt;typeparam name = &quot;TException&quot;&gt;The type of the exception we want to perform the rescue on&lt;/typeparam&gt;</span>
</span><span class='line'><span class="k">internal</span> <span class="k">class</span> <span class="nc">RescueCoroutineDecorator</span><span class="p">&lt;</span><span class="n">TException</span><span class="p">&gt;</span> <span class="p">:</span> <span class="n">ResultDecoratorBase</span>
</span><span class='line'>    <span class="n">where</span> <span class="n">TException</span> <span class="p">:</span> <span class="n">Exception</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">readonly</span> <span class="kt">bool</span> <span class="n">_cancelResult</span><span class="p">;</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">readonly</span> <span class="n">Func</span><span class="p">&lt;</span><span class="n">TException</span><span class="p">,</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">IResult</span><span class="p">&gt;&gt;</span> <span class="n">_rescue</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nf">RescueCoroutineDecorator</span><span class="p">(</span><span class="n">IResult</span> <span class="n">inner</span><span class="p">,</span> <span class="n">Func</span><span class="p">&lt;</span><span class="n">TException</span><span class="p">,</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">IResult</span><span class="p">&gt;&gt;</span> <span class="n">rescue</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">cancelResult</span><span class="p">)</span>
</span><span class='line'>        <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">inner</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">rescue</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="n">ArgumentNullException</span><span class="p">(</span><span class="s">&quot;rescue&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">_rescue</span> <span class="p">=</span> <span class="n">rescue</span><span class="p">;</span>
</span><span class='line'>        <span class="n">_cancelResult</span> <span class="p">=</span> <span class="n">cancelResult</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the InnerCompleted()-Method we check if the Inner Result completed with an error of type TException and if so, execute the Rescue Coroutine. If not, we ignore the error and raise the Completed-Event with the same args.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">InnerCompleted</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">ResultCompletionEventArgs</span> <span class="n">args</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">base</span><span class="p">.</span><span class="n">InnerCompleted</span><span class="p">(</span><span class="n">sender</span><span class="p">,</span> <span class="n">args</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">Error</span> <span class="k">is</span> <span class="n">TException</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">var</span> <span class="n">error</span> <span class="p">=</span> <span class="p">(</span><span class="n">TException</span><span class="p">)</span><span class="n">args</span><span class="p">.</span><span class="n">Error</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">LogRescuedError</span><span class="p">(</span><span class="n">error</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">try</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">Rescue</span><span class="p">(</span><span class="n">error</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">Log</span><span class="p">.</span><span class="n">Error</span><span class="p">(</span><span class="n">e</span><span class="p">);</span>
</span><span class='line'>            <span class="n">OnCompleted</span><span class="p">(</span><span class="k">new</span> <span class="n">ResultCompletionEventArgs</span> <span class="p">{</span> <span class="n">Error</span> <span class="p">=</span> <span class="n">e</span> <span class="p">});</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">OnCompleted</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="k">void</span> <span class="nf">Rescue</span><span class="p">(</span><span class="n">TException</span> <span class="n">exception</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">rescueResult</span> <span class="p">=</span> <span class="k">new</span> <span class="n">SequentialResult</span><span class="p">(</span><span class="n">_rescue</span><span class="p">(</span><span class="n">exception</span><span class="p">).</span><span class="n">GetEnumerator</span><span class="p">());</span>
</span><span class='line'>    <span class="n">rescueResult</span><span class="p">.</span><span class="n">Completed</span> <span class="p">+=</span> <span class="n">RescueCompleted</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">rescueResult</span><span class="p">.</span><span class="n">Execute</span><span class="p">(</span><span class="n">_context</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, when the Rescue Coroutine completed, the Decorator will also complete. Since we execute the Rescue inside the execution of the Decorator we can also check if the Rescue completes successfully and react accordingly (like setting the error on the EventArgs or cancel it)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">private</span> <span class="k">void</span> <span class="nf">RescueCompleted</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">ResultCompletionEventArgs</span> <span class="n">args</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">(</span><span class="n">sender</span> <span class="k">as</span> <span class="n">IResult</span><span class="p">).</span><span class="n">Completed</span> <span class="p">-=</span> <span class="n">RescueCompleted</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">OnCompleted</span><span class="p">(</span><span class="k">new</span> <span class="n">ResultCompletionEventArgs</span> <span class="p">{</span> <span class="n">Error</span> <span class="p">=</span> <span class="n">args</span><span class="p">.</span><span class="n">Error</span><span class="p">,</span> <span class="n">WasCancelled</span> <span class="p">=</span> <span class="n">args</span><span class="p">.</span><span class="n">WasCancelled</span> <span class="p">||</span> <span class="n">CancelResult</span> <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The full code for the Rescue Decorator can be found here.</p>

<h2>Recap</h2>

<p>Well, with the Decorator Pattern it was possible to implement all the desired features in a nice and testable way. Furthermore, we can use same principle for executing a coroutine when the result is cancelled or when an exception is thrown inside the result.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Handling Errors in Caliburn.Micro's IResult - Part I]]></title>
    <link href="http://kmees.github.com/blog/2011/05/31/handling-errors-in-caliburn-dot-micros-iresult-part-i/"/>
    <updated>2011-05-31T22:01:00+02:00</updated>
    <id>http://kmees.github.com/blog/2011/05/31/handling-errors-in-caliburn-dot-micros-iresult-part-i</id>
    <content type="html"><![CDATA[<h2>The Problem</h2>

<p>One of Caliburn.Micro&#8217;s nicest feature is, hands down, the concept of Actions. In that concept the <code>IResult</code> plays an important role, especially when using <em>Coroutines</em>. If you don&#8217;t know about them, you should definately <a href="http://devlicio.us/blogs/rob_eisenberg/archive/2010/08/21/caliburn-micro-soup-to-nuts-part-5-iresult-and-coroutines.aspx">read up on them here first</a>.</p>

<p>So, let&#8217;s assume we are executing a Coroutine which does the following:</p>

<ul>
<li>show a loading screen to the user,</li>
<li>start processing a lot of data</li>
<li>hide the loading screen once the processing is finished.</li>
</ul>


<p>Since the processing is also likely to fail for whatever reason we want to handle the error by executing a <em>Rescue Coroutine</em>.</p>

<figure class='code'><figcaption><span>Pseudo Coroutine</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="n">IEnumerable</span> <span class="nf">ProcessData</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">yield</span> <span class="k">return</span> <span class="k">new</span> <span class="nf">BusyResult</span><span class="p">(</span><span class="s">&quot;Processing...&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">yield</span> <span class="k">return</span> <span class="k">new</span> <span class="nf">ProcessDataResult</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">yield</span> <span class="k">return</span> <span class="k">new</span> <span class="nf">NotBusyResult</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The implementation of those results is irrelevant since we want to have a look at how we can handle the error during the processing in a nice (reusable) way.</p>

<!--more-->


<h2>The First Attempt</h2>

<p>Well, let&#8217;s see how we can handle it at all. The first approach is to ignore the built-in mechanism and expose an error property on the result which will then be checked during the execution of the Coroutine.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="n">IEnumerable</span> <span class="nf">ProcessData</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">yield</span> <span class="k">return</span> <span class="k">new</span> <span class="nf">BusyResult</span><span class="p">(</span><span class="s">&quot;Processing...&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">var</span> <span class="n">processDataResult</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ProcessDataResult</span><span class="p">();</span>
</span><span class='line'>    <span class="k">yield</span> <span class="k">return</span> <span class="n">processDataResult</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">processDataResult</span><span class="p">.</span><span class="n">Error</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// We could use Coroutine.BeginExecute(Rescue().GetEnumerator()); but than the context would be null</span>
</span><span class='line'>        <span class="k">foreach</span> <span class="p">(</span><span class="n">var</span> <span class="n">rescueResult</span> <span class="k">in</span> <span class="n">Rescue</span><span class="p">())</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">yield</span> <span class="k">return</span> <span class="n">rescueResult</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">yield</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">yield</span> <span class="k">return</span> <span class="k">new</span> <span class="nf">NotBusyResult</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">IResult</span><span class="p">&gt;</span> <span class="n">Rescue</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">yield</span> <span class="k">return</span> <span class="k">new</span> <span class="nf">NotBusyResult</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// more rescue stuff</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">ProcessDataResult</span> <span class="p">:</span> <span class="n">IResult</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">Exception</span> <span class="n">Error</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">void</span> <span class="nf">Execute</span><span class="p">(</span><span class="n">ActionExecutionContext</span> <span class="n">context</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">try</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="c1">//process the data</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">Error</span> <span class="p">=</span> <span class="n">e</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Completed</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="k">new</span> <span class="n">ResultCompletionEventArgs</span><span class="p">());</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">event</span> <span class="n">EventHandler</span><span class="p">&lt;</span><span class="n">ResultCompletionEventArgs</span><span class="p">&gt;</span> <span class="n">Completed</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Although this works, there are some <em>problems</em> with this approach.</p>

<ul>
<li>We need to add an error property to each result where an error is likely (which may not be always possible)</li>
<li>The syntax for executing the Rescue Coroutine is quite ugly and not easy to comprehend</li>
<li>The method itself gets exponentially more complex for every result which can fail</li>
<li>Calling different rescues for different error is tideous</li>
</ul>


<h2>The Better Attempt</h2>

<p>The second approach uses the built-in mechanism by raising the Completed Event with the Error roperty of the ResultCompletitionEventArgs set to the actual error.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">IResult</span><span class="p">&gt;</span> <span class="n">ProcessData</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">yield</span> <span class="k">return</span> <span class="k">new</span> <span class="nf">BusyResult</span><span class="p">(</span><span class="s">&quot;Processing...&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">var</span> <span class="n">processDataResult</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ProcessDataResult</span><span class="p">();</span>
</span><span class='line'>    <span class="n">processDataResult</span><span class="p">.</span><span class="n">Completed</span> <span class="p">+=</span> <span class="p">(</span><span class="n">sender</span><span class="p">,</span> <span class="n">args</span><span class="p">)</span> <span class="p">=&gt;</span>
</span><span class='line'>                                       <span class="p">{</span>
</span><span class='line'>                                           <span class="k">if</span> <span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">Error</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>                                               <span class="n">Coroutine</span><span class="p">.</span><span class="n">BeginExecute</span><span class="p">(</span><span class="n">Rescue</span><span class="p">().</span><span class="n">GetEnumerator</span><span class="p">());</span>
</span><span class='line'>                                       <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">yield</span> <span class="k">return</span> <span class="n">processDataResult</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">yield</span> <span class="k">return</span> <span class="k">new</span> <span class="nf">NotBusyResult</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">IResult</span><span class="p">&gt;</span> <span class="n">Rescue</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">yield</span> <span class="k">return</span> <span class="k">new</span> <span class="nf">NotBusyResult</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// more rescue stuff</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">ProcessDataResult</span> <span class="p">:</span> <span class="n">IResult</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">void</span> <span class="nf">Execute</span><span class="p">(</span><span class="n">ActionExecutionContext</span> <span class="n">context</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">try</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="c1">//process the data</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">Completed</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="k">new</span> <span class="n">ResultCompletionEventArgs</span> <span class="p">{</span> <span class="n">Error</span> <span class="p">=</span> <span class="n">e</span> <span class="p">});</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Completed</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="k">new</span> <span class="n">ResultCompletionEventArgs</span><span class="p">());</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">event</span> <span class="n">EventHandler</span><span class="p">&lt;</span><span class="n">ResultCompletionEventArgs</span><span class="p">&gt;</span> <span class="n">Completed</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>With this approach we don&#8217;t need to add an extra property to our Result which is a huge gain but there are still some <em>disadvantages</em>.</p>

<ul>
<li>We &#8216;lose&#8217; the context in the Rescue Coroutine</li>
<li>Syntax still not optimal</li>
<li>Calling different rescues is still tedious</li>
</ul>


<h2>The Final Solution</h2>

<p>So, what we want is basically</p>

<ul>
<li>a nice syntax,</li>
<li>something that works for every implementation of IResult,</li>
<li>execute the Rescue Coroutine with the same context as the failing Coroutine,</li>
<li>and a way to handle different types of errors</li>
</ul>


<p>Whew, that&#8217;s quite a bit to ask for. Let&#8217;s have a look at the first two points. Since we want it to work on <em>every</em> implementation of IResult, we cannot use inheritance but how about an Extension Method for IResults together with some <em>fluent syntax</em>?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">IResult</span><span class="p">&gt;</span> <span class="n">ProcessData</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">yield</span> <span class="k">return</span> <span class="k">new</span> <span class="nf">BusyResult</span><span class="p">(</span><span class="s">&quot;Processing...&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">yield</span> <span class="k">return</span> <span class="k">new</span> <span class="nf">ProcessDataResult</span><span class="p">()</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Rescue</span><span class="p">&lt;</span><span class="n">IOException</span><span class="p">&gt;().</span><span class="n">With</span><span class="p">(</span><span class="n">coroutine</span><span class="p">:</span> <span class="n">IORescue</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Rescue</span><span class="p">().</span><span class="n">With</span><span class="p">(</span><span class="n">coroutine</span><span class="p">:</span> <span class="n">GeneralRescue</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">yield</span> <span class="k">return</span> <span class="k">new</span> <span class="nf">NotBusyResult</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">IResult</span><span class="p">&gt;</span> <span class="n">IORescue</span><span class="p">(</span><span class="n">IOException</span> <span class="n">exception</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">yield</span> <span class="k">return</span> <span class="k">new</span> <span class="nf">NotBusyResult</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// more rescue stuff</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">IResult</span><span class="p">&gt;</span> <span class="n">GeneralRescue</span><span class="p">(</span><span class="n">Exception</span> <span class="n">exception</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">yield</span> <span class="k">return</span> <span class="k">new</span> <span class="nf">NotBusyResult</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// more rescue stuff</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>That doesn&#8217;t look too bad, does it?</p>

<p>But since this post got really long, I will show the implementation of the solution in the next part. So you either wait for the next post.</p>
]]></content>
  </entry>
  
</feed>
